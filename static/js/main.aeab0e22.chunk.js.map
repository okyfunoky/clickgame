{"version":3,"sources":["components/Wrapper/index.js","components/TitleBar/index.js","components/ScoreBar/index.js","components/Card/index.js","util/util.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Wrapper","props","className","children","TitleBar","ScoreBar","highScore","score","Card","alt","data","name","src","imgSrc","onClick","id","shuffle","array","sort","Math","random","App","state","clickedImages","cardOnClick","randoArray","includes","resetGame","alert","usedImages","push","newScore","setState","console","log","this","map","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8RAYeA,MARf,SAAiBC,GACb,OACI,yBAAKC,UAAU,WACVD,EAAME,W,OCIJC,MARf,SAAkBH,GACd,OACI,wBAAIC,UAAU,YACTD,EAAME,W,OCUJE,MAbf,SAAkBJ,GACd,OACI,6BACI,wBAAIC,UAAU,YAAd,eACiBD,EAAMK,WAEvB,wBAAIJ,UAAU,YAAd,kBACoBD,EAAMM,S,OCOvBC,MAdf,SAAcP,GAKV,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKO,IAAKR,EAAMS,KAAKC,KAAMC,IAAKX,EAAMS,KAAKG,OAAQC,QAP/D,WACIb,EAAMa,QAAQb,EAAMS,KAAKK,U,QCDlBC,MAJf,SAAiBC,GACb,OAAOA,EAAMC,MAAK,kBAAMC,KAAKC,SAAU,OCUtBC,E,2MAEnBC,MAAQ,CACNZ,OACAa,cAAe,GACfhB,MAAO,EACPD,UAAW,G,EAGbkB,YAAc,SAAAT,GAEZ,IAAMU,EAAaT,EAAQ,EAAKM,MAAMZ,MAGtC,GAAI,EAAKY,MAAMC,cAAcG,SAASX,GACpC,EAAKY,YACLC,MAAM,eACD,GAAI,EAAKN,MAAMf,OAAS,GAE7B,EAAKoB,YACLC,MAAM,2CACD,CAGL,IAAIC,EAAa,EAAKP,MAAMC,cAC5BM,EAAWC,KAAKf,GAEhB,IAAIgB,EAAW,EAAKT,MAAMf,MAC1BwB,IAEA,EAAKC,SAAS,CAAEzB,MAAOwB,IAAY,WAC7B,EAAKT,MAAMf,MAAQ,EAAKe,MAAMhB,WAChC,EAAK0B,SAAS,CAAE1B,UAAW,EAAKgB,MAAMf,WAI1C,EAAKyB,SAAS,CAAET,cAAeM,IAC/BI,QAAQC,IAAI,eAAiB,EAAKZ,MAAMf,OAE1C,EAAKyB,SAAS,CAAEtB,KAAMe,K,2EAKtBU,KAAKH,SAAS,CAACzB,MAAO,IACtB4B,KAAKH,SAAS,CAACT,cAAe,O,+BAGtB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,yBAEE,kBAAC,EAAD,CAAUhB,MAAO4B,KAAKb,MAAMf,MAAOD,UAAW6B,KAAKb,MAAMhB,aAI1D6B,KAAKb,MAAMZ,KAAK0B,KAAI,SAAAC,GAAI,OACvB,kBAAC,EAAD,CAAM3B,KAAM2B,EAAMvB,QAAS,EAAKU,sB,GA1DTc,aCCbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,+5EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.aeab0e22.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css'\r\nimport { exportSpecifier } from '@babel/types';\r\n\r\nfunction Wrapper(props){\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './style.css'\r\n\r\nfunction TitleBar(props){\r\n    return (\r\n        <h1 className=\"titlebar\">\r\n            {props.children}\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default TitleBar;","import React from 'react';\r\nimport './style.css'\r\n\r\nfunction ScoreBar(props) {\r\n    return (\r\n        <div>\r\n            <h2 className=\"scorebar\">\r\n                High Score: {props.highScore}\r\n            </h2>\r\n            <h2 className=\"scorebar\">\r\n                Current Score: {props.score}\r\n            </h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreBar;","import React from 'react';\r\nimport './style.css'\r\n\r\nfunction Card(props){\r\n    function handleOnclick(){\r\n        props.onClick(props.data.id)\r\n    }\r\n    \r\n    return(\r\n        <div className=\"card\">\r\n            <div className=\"img-container\">\r\n                <img alt={props.data.name} src={props.data.imgSrc} onClick={handleOnclick}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","function shuffle(array){\r\n    return array.sort(() => Math.random() -0.5);\r\n}\r\n\r\nexport default shuffle;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wrapper from './components/Wrapper'\nimport TitleBar from './components/TitleBar'\nimport ScoreBar from './components/ScoreBar'\nimport Card from './components/Card'\nimport data from './carddata.json'\nimport shuffle from './util/util.js'\nimport { tsMethodSignature } from '@babel/types';\n\nexport default class App extends Component {\n\n  state = {\n    data,\n    clickedImages: [],\n    score: 0,\n    highScore: 0,\n  }\n\n  cardOnClick = id => {\n\n    const randoArray = shuffle(this.state.data);\n\n\n    if (this.state.clickedImages.includes(id)) {\n      this.resetGame();\n      alert(\"Loser!\")\n    } else if (this.state.score >= 10) {\n      //win\n      this.resetGame();\n      alert(\"You Win, please stop clicking me...\")\n    } else {\n\n      //push id to used\n      let usedImages = this.state.clickedImages;\n      usedImages.push(id);\n\n      let newScore = this.state.score;\n      newScore++;\n\n      this.setState({ score: newScore }, () => {\n        if (this.state.score > this.state.highScore) {\n          this.setState({ highScore: this.state.score })\n        }\n      })\n\n      this.setState({ clickedImages: usedImages })\n      console.log(\"Score is ...\" + this.state.score)\n    }\n    this.setState({ data: randoArray });\n\n  }\n\n  resetGame() {\n    this.setState({score: 0});\n    this.setState({clickedImages: []})\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <TitleBar>\n          React Clicky Game\n          <ScoreBar score={this.state.score} highScore={this.state.highScore}>\n          </ScoreBar>\n        </TitleBar>\n\n        {this.state.data.map(item => (\n          <Card data={item} onClick={this.cardOnClick}></Card>\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}